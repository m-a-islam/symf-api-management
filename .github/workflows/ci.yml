name: Symfony CI/CD

# --- Triggers ---
on:
  push:
    branches: [ "main" ] # Run CD only on pushes to the main branch
  pull_request:
    branches: [ "main" ]

# --- Jobs ---
jobs:
  # --- Job 1: Run Tests (Our existing CI job) ---
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env.test to .env
        run: php -r "file_exists('.env') || copy('.env.test', '.env');"
        working-directory: ./src # Specify working directory for this step too

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, pdo, pdo_mysql, intl, zip
          coverage: none

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          # The path now needs to be relative to the root
          path: src/${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/src/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run Linter
        run: php ./bin/console lint:yaml ./config

      - name: Check Coding Standards
        run: php ./vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Run Tests
        run: php ./bin/phpunit

  # --- Job 2: Build and Push Docker Image (Our new CD job) ---
  build-and-push:
    # This job will only run if the 'test' job completes successfully
    needs: test
    # We only want to run this job on a push to the main branch, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2.1: Log in to Docker Hub
      # This uses the secrets we created in the GitHub repository settings
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 2.2: Set up Docker Buildx
      # This is a required step for building images efficiently
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 2.3: Build and push the image
      # This is the main action. It builds our production Dockerfile and pushes it.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: . # Use the root of our repo as the build context
          dockerfile: docker/Dockerfile.prod # Specify our new production Dockerfile
          push: true # Actually push the image to the registry
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kemas-key-api:latest # The name of the image